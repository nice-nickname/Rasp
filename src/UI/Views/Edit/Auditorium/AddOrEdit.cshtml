@model AddOrEditAuditoriumCommand

@{
    Layout = "~/Views/Shared/_AddOrEdit_Layout.cshtml";
}

@section Title
{
    @DataResources.Auditorium
}

@section Body
{
    @using (Html.Controls().Form(settings =>
    {
        settings.Url = Url.Dispatcher().Push<AddOrEditAuditoriumCommand>();
        settings.OnSave = dsl => dsl.Document.RedirectTo('#' + Url.Dispatcher().Query(new GetAuditoriumsQuery()).AsView("~/Views/Edit/Auditorium/Index.cshtml").ToRelative());
        settings.Class = "d-flex flex-column gap-3";
    }))
    {
        @Html.HiddenFor(r => r.Id)

        <h5>@DataResources.MainInformation</h5>

        <div class="mx-3 d-flex gap-3">
            @Html.ForGroup(r => r.BuildingId).DropDown(control =>
            {
                control.AddClass("w-50");
                control.Label.Name = DataResources.Building;
                control.Input.Data = Html.Dispatcher().Query(new GetBuildingsForDDQuery());
            })
            @Html.ForGroup(r => r.Code).TextBox(control =>
            {
                control.AddClass("w-50");
                control.Label.Name = DataResources.Placeholder_AuditoriumNumber;
            })
        </div>

        <div class="mx-3 d-flex gap-3">
            @Html.ForGroup(r => r.DepartmentId).DropDown(control =>
            {
                control.AddClass("w-100");
                control.Label.Name = DataResources.Department;
                control.Input.Data = Html.Dispatcher().Query(new GetDepartmentsForDDQuery
                {
                    FacultyId = Convert.ToInt32(Context.Request.Cookies[GlobalSelectors.FacultyId])
                });
            })
        </div>

        <div class="form-divider"></div>

        <h5>@DataResources.AuditoriumKind</h5>

        <div class="mx-3 d-flex flex-column">
            @{
                var i = 0;
            }
            @foreach (var kind in Html.Dispatcher().Query(new GetAuditoriumKindsForMultiselectQuery
            {
                Ids = Model.Kinds.Select(r => r.Id).ToArray()
            }))
            {
                var prefix = $"{nameof(Model.Kinds)}[{i}].";

                <div class="form-check">
                    @Html.Hidden(prefix + nameof(AddOrEditAuditoriumCommand.TempAuditoriumKind.Id), kind.Value)
                    @Html.Hidden(prefix + nameof(AddOrEditAuditoriumCommand.TempAuditoriumKind.Kind), kind.Text)
                    @Html.Hidden(prefix + nameof(AddOrEditAuditoriumCommand.TempAuditoriumKind.IsSelected), kind.Selected)
                    @(Html.When(JqueryBind.Change)
                          .OnSuccess(dsl => dsl.WithName(prefix + nameof(AddOrEditAuditoriumCommand.TempAuditoriumKind.IsSelected))
                                               .JQuery.Attr.Val(Selector.Jquery.Self()))
                          .AsHtmlAttributes(new
                          {
                              @class = "form-check-input",
                              type = "checkbox",
                              value = kind.Selected,
                              id = $"auditorium-kind-{i}"
                          })
                          .ToTag(HtmlTag.Input))
                    <label class="form-check-label" for="auditorium-kind-@i">
                        @kind.Text
                    </label>
                </div>

                i++;
            }
        </div>
    }
}
