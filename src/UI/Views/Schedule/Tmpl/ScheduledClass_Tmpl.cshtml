@model ITemplateSyntax<GetScheduleByWeekQuery.ClassItem>

@{
    var cardBackground = Model.Inline(r => r.AuditoriumId, Model.IsInline(r => r.IsUnwanted, "unwanted-warning"), "class-card-warning");
}

<div class="h-100 bg-light rounded class-card d-flex flex-column shadow shadow-hover cursor-grab @cardBackground" role="drag-element" name="card">
    @Html.Hidden(nameof(SaveScheduleCommand.IsUnwanted), Model.For(r => r.IsUnwanted))
    @Html.Hidden(nameof(SaveScheduleCommand.DisciplinePlanId), Model.For(r => r.DisciplinePlanId))
    @Html.Hidden(nameof(SaveScheduleCommand.SubDisciplineId), Model.For(r => r.SubDisciplineId))
    @Html.Hidden(nameof(SaveScheduleCommand.SubGroupNo), Model.For(r => r.SubGroupNo))
    @Html.Hidden(nameof(SaveScheduleCommand.Id), Model.For(r => r.Id))
    @Html.Hidden(nameof(SaveScheduleCommand.TeacherId), Model.For(r => r.TeacherId))

    <div class="w-100 rounded-top flex-shrink-0" style="height: 0.25rem; background-color: @Model.For(r => r.Color)"></div>

    <div class="d-flex mx-1 mt-1 gap-2">
        <div class="flex-grow-1 discipline-code" title="@Model.For(r => r.Discipline)">
            @Model.For(r => r.DisciplineCode)
        </div>
        <div class="flex-grow-1 discipline text-overflow-elipsis text-nowrap overflow-hidden" title="@Model.For(r => r.Discipline)">
            @Model.For(r => r.Discipline)
        </div>

        <div class="flex-shrink-0 subdiscipline-code" title="@Model.For(r => r.SubDiscipline)">
            @Model.For(r => r.SubDisciplineCode)
        </div>
        <div class="flex-shrink-0 subdiscipline" title="@Model.For(r => r.SubDiscipline)">
            @Model.For(r => r.SubDiscipline)
        </div>
    </div>

    <div class="mx-1 d-flex gap-2">
        <div class="flex-grow-1" title="@Model.For(r => r.SubGroupNo) @DataResources.SubGroup">
            @Model.Inline(r => r.HasSubGroups,
                          @<text>
                              @Model.For(r => r.SubGroupNo)
                           </text>,
                          @<text>
                              -
                           </text>)
        </div>
        <div class="flex-shrink-0 text-nowrap text-overflow-elipsis overflow-hidden"
             @(Model.IsInline(r => r.IsGroup, $@"title=""{Model.For(r => r.Department)}""")) @(Model.IsInline(r => r.IsTeacher, $@"title=""{Model.For(r => r.Department)}"""))>
            @Model.IsInline(r => r.IsGroup, Model.For(r => r.DepartmentCode))
            @Model.IsInline(r => r.IsAuditorium, Model.For(r => r.Group))
        </div>
    </div>

    <div class="mx-1 d-flex gap-2 additional-info">
        <div class="flex-grow-1 text-nowrap text-overflow-elipsis overflow-hidden minw-0 w-px-0" @Model.IsInline(r => r.IsTeacher, @$"title=""{Model.For(r => r.Group)}""")>
            @Model.IsInline(r => r.IsGroup, Model.For(r => r.Teacher))
            @Model.IsInline(r => r.IsAuditorium, Model.For(r => r.Teacher))
            @Model.IsInline(r => r.IsTeacher, Model.For(r => r.Group))
        </div>
        <div class="flex-shrink-0">
            @Model.IsInline(r => r.IsTeacher, Model.For(r => r.DepartmentCode))
        </div>
    </div>

    <div class="mx-1 mb-1 h-px-30 mt-auto d-flex gap-1 actions">
        @Model.NotInline(r => r.IsAuditorium, @<text>
                                                  @Html.Hidden(nameof(SaveScheduleCommand.AuditoriumId), Model.For(r => r.AuditoriumId))

                                                  @await Html.PartialAsync("~/Views/Shared/DropDown_Tmpl.cshtml", new DropdownModel
                                                         {
                                                             Button = new DropdownModel.ButtonSettings
                                                             {
                                                                 Classes = "w-100 btn-light btn-sm h-px-30",
                                                                 Text = Model.For(r => r.Auditorium)
                                                             },
                                                             Items = new List<IHtmlContent>
                                                             {
                                                                 Html.Controls().Dropdown.List(settings =>
                                                                 {
                                                                     settings.Url = Url.Dispatcher().Query<GetAuditoriumsScheduleForDDQuery>(new
                                                                     {
                                                                         Week = Selector.Jquery.Name<GetAuditoriumsScheduleForDDQuery>(r => r.Week),
                                                                         Day = Model.For(r => r.Day),
                                                                         ScheduleFormatId = Model.For(r => r.ScheduleFormatId),
                                                                         AuditoriumId = Model.For(r => r.AuditoriumId),
                                                                         SubDisciplineId = Model.For(r => r.SubDisciplineId),
                                                                         GroupId = Model.For(r => r.GroupId)
                                                                     }).AsJson();
                                                                     settings.OnClick = dsl =>
                                                                     {
                                                                         var auditoriumTextId = $"auditorium-{Model.For(r => r.DisciplineId)}-{Model.For(r => r.DisciplinePlanId)}-{Model.For(r => r.SubDisciplineId)}";

                                                                         dsl.WithId(auditoriumTextId).Insert.Use(Selector.Event.Data.For("text")).Html();
                                                                         dsl.WithSelf(r => r.Closest(q => q.Name("card")).Find(q => q.Name<SaveScheduleCommand>(w => w.AuditoriumId)))
                                                                            .JQuery.Attr.Val(Selector.Event.Data.For("value"));
                                                                     };
                                                                 })
                                                             },
                                                             Classes = "flex-grow-1"
                                                         })
                                               </text>)
        @(Html.When(JqueryBind.Click)
              .StopPropagation()
              .OnSuccess(dsl =>
              {
                  dsl.WithSelf(s => s.Closest(c => c.Name("card")).Find(f => f.Name<SaveScheduleCommand>(c => c.IsUnwanted)))
                     .JQuery.Attr.Val(Model.Inline(r => r.IsUnwanted, "false", "true"));
                  dsl.WithSelf(s => s.Closest(c => c.Name("cell")))
                     .Trigger.None();
              })
              .AsHtmlAttributes(classes: "btn btn-light p-1")
              .ToButton(@<span class="material-symbols-rounded">error</span>))
    </div>
</div>
