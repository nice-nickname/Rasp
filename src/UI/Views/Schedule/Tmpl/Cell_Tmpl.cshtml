@model ITemplateSyntax<GetScheduleByWeekQuery.ClassItem>

@{
    var urlSave = Url.Dispatcher().Push<SaveScheduleCommand>(new
    {
        Week = Selector.Jquery.Name<GetClassByWeekQuery>(r => r.Week),
        ScheduleFormatId = Selector.Jquery.Self().Closest(r => r.Role("cell")).Find(r => r.Name<SaveScheduleCommand>(q => q.ScheduleFormatId)),
        DisciplinePlanId = Selector.Jquery.Self().Find(r => r.Name<SaveScheduleCommand>(q => q.DisciplinePlanId)),
        Day = Selector.Jquery.Self().Closest(r => r.Role("row")).Find(r => r.Name<SaveScheduleCommand>(q => q.Day)),
        SubGroupNo = Selector.Jquery.Self().Find(r => r.Name<SaveScheduleCommand>(q => q.SubGroupNo)),
        AuditoriumId = Selector.Jquery.Self().Find(r => r.Name<SaveScheduleCommand>(q => q.AuditoriumId)),
        Id = Selector.Jquery.Self().Find(r => r.Name<SaveScheduleCommand>(q => q.Id)),
        TeacherId = Selector.Jquery.Self().Find(r => r.Name<SaveScheduleCommand>(q => q.TeacherId)),
        SubDisciplineId = Selector.Jquery.Self().Find(r => r.Name<SaveScheduleCommand>(q => q.SubDisciplineId)),
        FacultyId = Selector.Jquery.Name<SaveScheduleCommand>(r => r.FacultyId),
        Mode = Selector.Jquery.Name<SaveScheduleCommand>(r => r.Mode),
        IsUnwanted = Selector.Jquery.Name<SaveScheduleCommand>(r => r.IsUnwanted)
    });

    Action<IIncodingMetaLanguageCallbackBodyDsl> reloadSchedule = dsl =>
    {
        dsl.WithId(GlobalSelectors.ScheduleId).Trigger.None();
        dsl.WithId(GlobalSelectors.UnscheduledId).Trigger.None();
    };
}

<div class="bg-base rounded position-relative cell" role="cell">
    @Html.Hidden(nameof(SaveScheduleCommand.ScheduleFormatId), Model.For(r => r.ScheduleFormatId))

    @using (Html.When("incodingdropped none")
                .AjaxPost(urlSave)
                .OnSuccess(dsl =>
                {
                    dsl.With(r => r.Role("toast-container")).Insert.WithTemplateByUrl(Url.Dispatcher().Model<ToastModel>(new
                    {
                        Title = DataResources.Error,
                        Message = Selector.Result.For<SaveScheduleCommand>(c => c.CustomValidationMessage),
                        TitleColor = ToastModel.Color.Danger,
                        TitleTextColor = ToastModel.Color.White
                    }).AsView("~/Views/Shared/Toast_Tmpl.cshtml")).Append()
                       .If(() => Selector.Result != string.Empty);
                    
                    reloadSchedule(dsl);
                })
                .AsHtmlAttributes(new
                {
                    @class = "w-100 h-100 bg-base rounded",
                    role = Model.NotInline(r => r.IsBlocked, "drag-container"),
                    name = "cell"
                })
                .ToBeginTag(HtmlTag.Div))
    {
        @Model.NotInline(r => r.IsEmpty, await Html.PartialAsync("~/Views/Schedule/Tmpl/ScheduledClass_Tmpl.cshtml", Model))

        @Model.Inline(r => r.IsBlocked, @<div class="d-flex w-100 h-100 justify-content-center align-items-center bg-gray rounded unallowed-gray">
                                            <span class="material-symbols-rounded">close</span>
                                        </div>,
                      Model.IsInline(r => r.IsUnwanted, @<div class="d-flex w-100 h-100 justify-content-center align-items-center bg-gray rounded" role="unwanted">
                                                            @DataResources.Unwanted
                                                        </div>))

        @Model.IsInline(r => r.IsEmpty, Model.IsInline(r => r.IsAuditorium, Html.Hidden(nameof(SaveScheduleCommand.AuditoriumId), Model.For(r => r.AuditoriumId))))
    }
</div>
