@{
    Layout = "~/Views/Shared/_Schedule_Layout.cshtml";

    var unallocatedPanelId = Guid.NewGuid().ToString();
    var unallocatedSearchId = Guid.NewGuid().ToString();
    var unallocatedFilterId = Guid.NewGuid().ToString();
    var unallocatedClassesId = Guid.NewGuid().ToString();
    var currentWeekId = Guid.NewGuid().ToString();

    var scheduleFormat = Html.Dispatcher().Query(new AddOrEditScheduleFormatCommand.AsQuery { FacultyId = Convert.ToInt32(Context.Request.Cookies[GlobalSelectors.FacultyId]) });

    Action<IIncodingMetaLanguageCallbackBodyDsl> refreshWeek = dsl => { dsl.WithId(unallocatedClassesId).Trigger.None(); };
}

@section Body
{
    <div class="d-flex gap-3">
        <div class="w-px-324 d-flex flex-column flex-shrink-0 gap-2">
            <div class="d-flex gap-2 flex-shrink-0 bg-base">
                <a class="btn btn-primary w-50 flex-grow-1" href="@Url.Action("Index", "Home")">
                    @DataResources.ToHome
                </a>

                <div class="btn btn-light w-50 flex-grow-1">
                    ?
                </div>
            </div>
        </div>

        <div class="d-flex gap-3 flex-grow-1">
            <div class="d-flex gap-2 rounded flex-grow-1 bg-base">
                <div class="btn btn-light">
                    @DataResources.Generate
                </div>

                <div class="btn btn-light">
                    @DataResources.Clear
                </div>

                <div class="btn btn-light ms-auto">
                    Показать/Скрыть проблемные пары
                </div>
            </div>

            <div class="w-10 input flex-shrink-0">
                <input type="text" class="rounded search w-100 h-100"/>
                <span class="material-symbols-rounded addon-r">search</span>
            </div>

            <div class="flex-shrink-0 d-flex gap-2 rounded bg-base">
                <div class="btn btn-light p-1">
                    <span class="material-symbols-rounded">settings</span>
                </div>

                <div class="btn btn-light">
                    @DataResources.funny_userok
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex flex-grow-1 gap-3">
    <div class="mw-px-324 w-100 d-flex flex-column flex-shrink-0 gap-2 w-animate" id="@unallocatedPanelId">
        <div class="rounded bg-base flex-grow-1 p-2 d-flex flex-column gap-2">
            <div class="mb-1 d-flex gap-2">
                <div class="flex-grow-1 input" id="@unallocatedSearchId">
                    <input type="text" class="rounded search w-100 h-100"/>
                    <span class="material-symbols-rounded addon-r">search</span>
                </div>

                <div class="btn btn-light flex-shrink-0 p-1" id="@unallocatedFilterId">
                    <span class="material-symbols-rounded">filter_alt</span>
                </div>

                @(Html.When(JqueryBind.Click)
                      .OnSuccess(dsl =>
                      {
                          dsl.WithId(unallocatedPanelId).JQuery.Attr.ToggleClass("mw-px-324 mw-px-48");

                          dsl.Self().Insert.Use(@<span class="material-symbols-rounded">chevron_left</span>).Html()
                             .If(() => Selector.Jquery.Id(unallocatedPanelId).HasClass("mw-px-324"));
                          dsl.Self().Insert.Use(@<span class="material-symbols-rounded">chevron_right</span>).Html()
                             .If(() => Selector.Jquery.Id(unallocatedPanelId).HasClass("mw-px-48"));

                          dsl.WithId(unallocatedSearchId).JQuery.Attr.ToggleClass("hidden");
                          dsl.WithId(unallocatedFilterId).JQuery.Attr.ToggleClass("hidden");
                          dsl.WithId(unallocatedClassesId).JQuery.Attr.ToggleClass("hidden");
                      })
                      .AsHtmlAttributes(classes: "btn btn-light flex-shrink-0 p-1")
                      .ToButton(@<span class="material-symbols-rounded">chevron_left</span>))
            </div>

            @(Html.When(JqueryBind.InitIncoding | JqueryBind.None)
                  .Ajax<GetClassByWeekQuery>(new
                  {
                      Week = Selector.Jquery.Name<GetClassByWeekQuery>(r => r.Week)
                  })
                  .OnSuccess(dsl =>
                  {
                      dsl.Self().Insert.WithTemplateByView("~/Views/Schedule/Tmpl/Class_Tmpl.cshtml").Html();

                      dsl.Self().JQuery.PlugIn("dragAndDrop", new
                      {
                          item = Selector.Jquery.Role("drag-element").ToSelector(),
                          container = Selector.Jquery.Role("drag-container").ToSelector(),
                          forOne = true
                      });
                  })
                  .AsHtmlAttributes(classes: "d-flex flex-column flex-grow-1 gap-2 ", id: unallocatedClassesId)
                  .ToDiv())
        </div>
    </div>

    <div class="d-flex flex-column flex-grow-1 gap-3">
        <div class="d-flex">
            <div class="d-flex gap-2 bg-base rounded">
                <div class="btn btn-light p-1">
                    <span class="material-symbols-rounded">filter_alt</span>
                </div>

                <div class="btn btn-light">
                    @DataResources.Teacher
                </div>

                <div class="btn btn-light">
                    @DataResources.Auditorium
                </div>

                <div class="btn btn-light">
                    КТбо4-8
                </div>
            </div>

            <div class="ms-auto d-flex gap-2 bg-base rounded">
                @(Html.When(JqueryBind.Click)
                      .OnSuccess(dsl =>
                      {
                          dsl.WithName<GetClassByWeekQuery>(r => r.Week).Func.DecrementVal()
                             .If(() => Selector.Jquery.Name<GetClassByWeekQuery>(r => r.Week) > 1);
                          dsl.WithId(currentWeekId).JQuery.Dom.Use(Selector.Jquery.Name<GetClassByWeekQuery>(r => r.Week)).Html();

                          refreshWeek(dsl);
                      })
                      .AsHtmlAttributes(classes: "btn btn-light p-1")
                      .ToButton(@<span class="material-symbols-rounded">arrow_back</span>))

                @(Html.When(JqueryBind.InitIncoding)
                      .OnSuccess(dsl => { })
                      .AsHtmlAttributes(new { name = nameof(GetClassByWeekQuery.Week) })
                      .ToInput(HtmlInputType.Hidden, "1"))
                <div class="btn btn-light" id="@currentWeekId">
                    1
                </div>
                @Html.Hidden(nameof(AddOrEditScheduleFormatCommand.CountOfWeeks), scheduleFormat.CountOfWeeks)
                @Html.Hidden(nameof(AddOrEditScheduleFormatCommand.StartDate), scheduleFormat.StartDate)

                @(Html.When(JqueryBind.Click)
                      .OnSuccess(dsl =>
                      {
                          dsl.WithName<GetClassByWeekQuery>(r => r.Week).Func.IncrementVal()
                             .If(() => Selector.Jquery.Name<GetClassByWeekQuery>(r => r.Week) < Selector.Jquery.Name<AddOrEditScheduleFormatCommand>(r => r.CountOfWeeks));
                          dsl.WithId(currentWeekId).JQuery.Dom.Use(Selector.Jquery.Name<GetClassByWeekQuery>(r => r.Week)).Html();

                          refreshWeek(dsl);
                      })
                      .AsHtmlAttributes(classes: "btn btn-light p-1")
                      .ToButton(@<span class="material-symbols-rounded">arrow_forward</span>))
            </div>
        </div>

        <div class="flex-grow-1 d-flex flex-column gap-2 schedule">
            <div class="d-flex gap-2 s-row">
                <div class="column-header row-header flex-shrink-0"></div>
                @for (int i = 0; i < scheduleFormat.ItemsCount; i++)
                {
                    <div class="w-100 bg-primary rounded d-flex flex-column column-header">
                        <div>
                            @scheduleFormat.Items[i].Order
                        </div>
                        <div>
                            @scheduleFormat.Items[i].Start
                        </div>
                        <div>
                            @scheduleFormat.Items[i].End
                        </div>
                    </div>
                }
            </div>

            <div class="d-flex gap-2 s-row">
                <div class="bg-primary rounded row-header flex-shrink-0">
                    Понедельник
                </div>
                @for (int i = 0; i < scheduleFormat.ItemsCount; i++)
                {
                    <div class="bg-base rounded position-relative cell">
                        <div class="w-100 h-100 bg-base rounded" role="drag-container"></div>
                    </div>
                }
            </div>

            <div class="d-flex gap-2 s-row">
                <div class="bg-primary rounded row-header flex-shrink-0">
                    Вторник
                </div>
                @for (int i = 0; i < scheduleFormat.ItemsCount; i++)
                {
                    <div class="bg-base rounded position-relative cell">
                        <div class="w-100 h-100 bg-base rounded" role="drag-container"></div>
                    </div>
                }
            </div>

            <div class="d-flex gap-2 s-row">
                <div class="bg-primary rounded row-header flex-shrink-0">
                    Среда
                </div>
                @for (int i = 0; i < scheduleFormat.ItemsCount; i++)
                {
                    <div class="bg-base rounded position-relative cell">
                        <div class="w-100 h-100 bg-base rounded" role="drag-container"></div>
                    </div>
                }
            </div>

            <div class="d-flex gap-2 s-row">
                <div class="bg-primary rounded row-header flex-shrink-0">
                    Четверг
                </div>
                @for (int i = 0; i < scheduleFormat.ItemsCount; i++)
                {
                    <div class="bg-base rounded position-relative cell">
                        <div class="w-100 h-100 bg-base rounded" role="drag-container"></div>
                    </div>
                }
            </div>

            <div class="d-flex gap-2 s-row">
                <div class="bg-primary rounded row-header flex-shrink-0">
                    Пятница
                </div>
                @for (int i = 0; i < scheduleFormat.ItemsCount; i++)
                {
                    <div class="bg-base rounded position-relative cell">
                        <div class="w-100 h-100 bg-base rounded" role="drag-container"></div>
                    </div>
                }
            </div>

            <div class="d-flex gap-2 s-row">
                <div class="bg-primary rounded row-header flex-shrink-0">
                    Суббота
                </div>
                @for (int i = 0; i < scheduleFormat.ItemsCount; i++)
                {
                    <div class="bg-base rounded position-relative cell">
                        <div class="w-100 h-100 bg-base rounded" role="drag-container"></div>
                    </div>
                }
            </div>
        </div>
    </div>
    </div>
}
